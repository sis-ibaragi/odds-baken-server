{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"fs\"","webpack:///./src/settings.ts","webpack:///external \"body-parser\"","webpack:///external \"express\"","webpack:///./src/connection-pool.ts","webpack:///external \"promise-mysql\"","webpack:///./src/record/race-summary-record.ts","webpack:///./src/record/odds-time-record.ts","webpack:///./src/record/umrn-odds-record.ts","webpack:///./src/record/kaisai-record.ts","webpack:///./src/record/tan-odds-record.ts","webpack:///./src/record/fuku-odds-record.ts","webpack:///./src/record/tnpk-odds-diff-record.ts","webpack:///./src/server.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","DatabaseSettings","__webpack_exports__","HOST","USER","PASSWORD","DATABASE","CONNECTION_LIMIT","ConnectionPool","createPool","host","user","password","database","limit","_a","this","promise_mysql__WEBPACK_IMPORTED_MODULE_0__","connectionLimit","pool","_b","sent","getConnection","releaseConnection","conn","RaceSummaryRecord","OddsTimeRecord","UmrnOddsRecord","prevUmrnOddsRecord","KaisaiRecord","TanOddsRecord","FukuOddsRecord","TnpkOddsDiffRecord","__dirname","express__WEBPACK_IMPORTED_MODULE_0__","body_parser__WEBPACK_IMPORTED_MODULE_1__","_connection_pool__WEBPACK_IMPORTED_MODULE_2__","_settings__WEBPACK_IMPORTED_MODULE_3__","fs__WEBPACK_IMPORTED_MODULE_4__","_record_race_summary_record__WEBPACK_IMPORTED_MODULE_5__","_record_odds_time_record__WEBPACK_IMPORTED_MODULE_6__","_record_umrn_odds_record__WEBPACK_IMPORTED_MODULE_7__","_record_kaisai_record__WEBPACK_IMPORTED_MODULE_8__","_record_tan_odds_record__WEBPACK_IMPORTED_MODULE_9__","_record_fuku_odds_record__WEBPACK_IMPORTED_MODULE_10__","_record_tnpk_odds_diff_record__WEBPACK_IMPORTED_MODULE_11__","app","use","extended","req","res","next","header","send","process","cwd","connection","then","sql","query","rows","arr","Array","forEach","element","push","json","catch","err","console","error","status","finally","params","date","record","kaisaiCd","kaisaiNm","raceNo","umaCnt","tnpkOddsTime","umrnOddsTime","umrn1Odds","tan10Odds","fuku8Odds","umrnAnaFlg","tanAnaFlg","fukuAnaFlg","anaFlgCnt","row","kaisaiDt","oddsTimeNo","umaNo","data","ninkiNo","tanOdds","umrnNinkiNo","idoFlg","fukuOdds","prevRecord","umrnOdds","markCd","diffRt","kabeCd","tanOdds1","tanOdds2","fukuOdds1","fukuOdds2","tanUpRt","tanUpFlg","fukuUpRt","fukuUpFlg","post","body","beginTransaction","commit","listen","log"],"mappings":"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","file":"server.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n","module.exports = require(\"fs\");","export namespace DatabaseSettings {\r\n    export const HOST: string = 'localhost';\r\n    export const USER: string = 'appuser01';\r\n    export const PASSWORD: string = 'p@ssw0rd';\r\n    export const DATABASE: string = 'appdb01';\r\n    export const CONNECTION_LIMIT: number = 10;\r\n}\r\n","module.exports = require(\"body-parser\");","module.exports = require(\"express\");","import * as mysql from 'promise-mysql';\r\n\r\nexport class ConnectionPool {\r\n    private pool: mysql.Pool;\r\n\r\n    public async createPool(host: string, user: string, password: string, database: string, limit: number) {\r\n        this.pool = await mysql.createPool({\r\n            host,\r\n            user,\r\n            password,\r\n            database,\r\n            connectionLimit: limit,\r\n        });\r\n    }\r\n\r\n    public getConnection() {\r\n        return this.pool.getConnection();\r\n    }\r\n\r\n    public releaseConnection(conn: mysql.PoolConnection) {\r\n        this.pool.releaseConnection(conn);\r\n    }\r\n}\r\n","module.exports = require(\"promise-mysql\");","export class RaceSummaryRecord {\r\n    kaisaiCd: string;\r\n    kaisaiNm: string;\r\n    raceNo: number;\r\n    umaCnt: number;\r\n    tnpkOddsTime: string | null;\r\n    umrnOddsTime: string | null;\r\n    tan10Odds: number | null;\r\n    umrn1Odds: number | null;\r\n    fuku8Odds: number | null;\r\n    tanAnaFlg: boolean;\r\n    umrnAnaFlg: boolean;\r\n    fukuAnaFlg: boolean;\r\n    anaFlgCnt: number;\r\n}\r\n","export class OddsTimeRecord {\r\n  oddsTimeNo: number;\r\n  tnpkOddsTime: string;\r\n  umrnOddsTime: string;\r\n}\r\n","export class UmrnOddsRecord {\r\n    ninkiNo: number;\r\n    umaNo: number;\r\n    umrnOdds: number | null;\r\n    markCd: string | null;\r\n    diffRt: number | null;\r\n    kabeCd: string | null;\r\n    prevUmrnOddsRecord: UmrnOddsRecord = null;\r\n}\r\n","export class KaisaiRecord {\r\n  kaisaiCd: string;\r\n  kaisaiNm: string;\r\n  kaisaiDt: string;\r\n}\r\n","export class TanOddsRecord {\r\n  ninkiNo: number;\r\n  umaNo: number;\r\n  tanOdds: number;\r\n  idoFlg: boolean;\r\n}\r\n","export class FukuOddsRecord {\r\n  ninkiNo: number;\r\n  umaNo: number;\r\n  fukuOdds: number;\r\n  idoFlg: boolean;\r\n}\r\n","export class TnpkOddsDiffRecord {\r\n    umaNo: number;\r\n    tanOdds1: number;\r\n    tanOdds2: number;\r\n    tanUpRt: number;\r\n    tanUpFlg: boolean;\r\n    fukuOdds1: number;\r\n    fukuOdds2: number;\r\n    fukuUpRt: number;\r\n    fukuUpFlg: boolean;\r\n}\r\n","import * as Express from 'express';\r\nimport * as bodyParser from 'body-parser';\r\nimport * as connPool from './connection-pool';\r\nimport * as settings from './settings';\r\nimport * as fs from 'fs';\r\nimport { RaceSummaryRecord } from './record/race-summary-record';\r\nimport { PoolConnection, Connection } from 'promise-mysql';\r\nimport { OddsTimeRecord } from './record/odds-time-record';\r\nimport { UmrnOddsRecord } from './record/umrn-odds-record';\r\nimport { KaisaiRecord } from './record/kaisai-record';\r\nimport { TanOddsRecord } from './record/tan-odds-record';\r\nimport { FukuOddsRecord } from './record/fuku-odds-record';\r\nimport { TnpkOddsDiffRecord } from './record/tnpk-odds-diff-record';\r\n\r\nconst app = Express();\r\nconst pool = new connPool.ConnectionPool();\r\n\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(bodyParser.json());\r\napp.use((req, res, next) => {\r\n    res.header('Access-Control-Allow-Origin', '*');\r\n    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\r\n    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\r\n    next();\r\n});\r\n\r\napp.get('/', (req: Express.Request, res: Express.Response, next: Express.NextFunction) => {\r\n    return res.send(process.cwd() + ' | ' + __dirname);\r\n});\r\n\r\napp.get('/kaisai/dates', (req: Express.Request, res: Express.Response, next: Express.NextFunction) => {\r\n    let connection: PoolConnection;\r\n    pool.getConnection()\r\n        .then(conn => {\r\n            connection = conn;\r\n            const sql = fs.readFileSync(process.cwd() + '/sql/select_kaisai_dt_list.sql', 'utf8');\r\n            return conn.query(sql);\r\n        })\r\n        .then(rows => {\r\n            const arr: string[] = Array();\r\n            rows.forEach(element => {\r\n                arr.push(element['KAISAI_DT']);\r\n            });\r\n            res.json(arr);\r\n            // return console.log(arr);\r\n        })\r\n        .catch(err => {\r\n            console.error(err);\r\n            res.status(500).json({});\r\n        })\r\n        .finally(() => {\r\n            pool.releaseConnection(connection);\r\n        });\r\n});\r\n\r\napp.get('/odds/summary/:date', (req: Express.Request, res: Express.Response, next: Express.NextFunction) => {\r\n    let connection: PoolConnection;\r\n    pool.getConnection()\r\n        .then(conn => {\r\n            connection = conn;\r\n            const sql = fs.readFileSync(process.cwd() + '/sql/select_odds_summary_list.sql', 'utf8');\r\n            return conn.query(sql, [1, req.params.date]);\r\n        })\r\n        .then(rows => {\r\n            const arr: RaceSummaryRecord[] = Array();\r\n            rows.forEach(element => {\r\n                const record = new RaceSummaryRecord();\r\n                record.kaisaiCd = element['KAISAI_CD'];\r\n                record.kaisaiNm = element['KAISAI_NM'];\r\n                record.raceNo = element['RACE_NO'];\r\n                record.umaCnt = element['UMA_NUM'];\r\n                record.tnpkOddsTime = element['TNPK_ODDS_TIME'];\r\n                record.umrnOddsTime = element['UMRN_ODDS_TIME'];\r\n                record.umrn1Odds = element['UMRN_ODDS'];\r\n                record.tan10Odds = element['TAN_ODDS'];\r\n                record.fuku8Odds = element['FUKU_ODDS_MAX'];\r\n                record.umrnAnaFlg = element['UMRN_FLG'] === 1 ? true : false;\r\n                record.tanAnaFlg = element['TAN_FLG'] === 1 ? true : false;\r\n                record.fukuAnaFlg = element['FUKU_FLG'] === 1 ? true : false;\r\n                if (record.umrnAnaFlg && record.tanAnaFlg && record.fukuAnaFlg) {\r\n                    record.anaFlgCnt = 3;\r\n                } else if (record.umrnAnaFlg && record.tanAnaFlg) {\r\n                    record.anaFlgCnt = 2;\r\n                } else if ((record.umrnAnaFlg || record.tanAnaFlg) && record.fukuAnaFlg) {\r\n                    record.anaFlgCnt = 1.5;\r\n                } else if (record.umrnAnaFlg || record.tanAnaFlg) {\r\n                    record.anaFlgCnt = 1;\r\n                }\r\n                arr.push(record);\r\n            });\r\n\r\n            res.json(arr);\r\n            // return console.log(arr);\r\n        })\r\n        .catch(err => {\r\n            console.error(err);\r\n            res.status(500).json({});\r\n        })\r\n        .finally(() => {\r\n            pool.releaseConnection(connection);\r\n        });\r\n});\r\n\r\napp.get('/kaisai/:kaisaiCd', (req: Express.Request, res: Express.Response, next: Express.NextFunction) => {\r\n    let connection: PoolConnection;\r\n    pool.getConnection()\r\n        .then(conn => {\r\n            connection = conn;\r\n            const sql = fs.readFileSync(process.cwd() + '/sql/select_kaisai_info.sql', 'utf8');\r\n            return conn.query(sql, [req.params.kaisaiCd]);\r\n        })\r\n        .then(rows => {\r\n            const row = rows[0];\r\n            const record = new KaisaiRecord();\r\n            record.kaisaiCd = row['KAISAI_CD'];\r\n            record.kaisaiNm = row['KAISAI_NM'];\r\n            record.kaisaiDt = row['KAISAI_DT'];\r\n            res.json(record);\r\n            // return console.log(record);\r\n        })\r\n        .catch(err => {\r\n            console.error(err);\r\n            res.status(500).json({});\r\n        })\r\n        .finally(() => {\r\n            pool.releaseConnection(connection);\r\n        });\r\n});\r\n\r\napp.get(\r\n    '/odds/:kaisaiCd/:raceNo/odds-times',\r\n    (req: Express.Request, res: Express.Response, next: Express.NextFunction) => {\r\n        let connection: PoolConnection;\r\n        pool.getConnection()\r\n            .then(conn => {\r\n                connection = conn;\r\n                const sql = fs.readFileSync(process.cwd() + '/sql/select_odds_time_list.sql', 'utf8');\r\n                return conn.query(sql, [req.params.kaisaiCd, req.params.raceNo]);\r\n            })\r\n            .then(rows => {\r\n                const arr: OddsTimeRecord[] = new Array();\r\n                rows.forEach(element => {\r\n                    const record = new OddsTimeRecord();\r\n                    record.oddsTimeNo = element['ODDS_TIME_NO'];\r\n                    record.tnpkOddsTime = element['TNPK_ODDS_TIME'];\r\n                    record.umrnOddsTime = element['UMRN_ODDS_TIME'];\r\n                    arr.push(record);\r\n                });\r\n                res.json(arr);\r\n                // return console.log(arr);\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                res.status(500).json({});\r\n            })\r\n            .finally(() => {\r\n                pool.releaseConnection(connection);\r\n            });\r\n    },\r\n);\r\n\r\napp.get(\r\n    '/odds/:kaisaiCd/:raceNo/:oddsTimeNo/tan',\r\n    (req: Express.Request, res: Express.Response, next: Express.NextFunction) => {\r\n        let connection;\r\n        const kaisaiCd = req.params.kaisaiCd,\r\n            raceNo = req.params.raceNo,\r\n            oddsTimeNo = req.params.oddsTimeNo;\r\n        pool.getConnection()\r\n            .then(conn => {\r\n                connection = conn;\r\n                const sql = fs.readFileSync(process.cwd() + '/sql/select_odds_umrn_rank1_list.sql', 'utf8');\r\n                return conn.query(sql, [kaisaiCd, raceNo, oddsTimeNo, kaisaiCd, raceNo, oddsTimeNo]);\r\n            })\r\n            .then(rows => {\r\n                const umaNo = rows[0]['UMA_NO'];\r\n                const sql = fs.readFileSync(process.cwd() + '/sql/select_odds_tan_list.sql', 'utf8');\r\n                return connection.query(sql, [\r\n                    kaisaiCd,\r\n                    raceNo,\r\n                    oddsTimeNo,\r\n                    umaNo,\r\n                    kaisaiCd,\r\n                    raceNo,\r\n                    oddsTimeNo,\r\n                    umaNo,\r\n                    kaisaiCd,\r\n                    raceNo,\r\n                    oddsTimeNo,\r\n                ]);\r\n            })\r\n            .then(rows => {\r\n                const arr: TanOddsRecord[] = new Array();\r\n                rows.forEach(data => {\r\n                    const record = new TanOddsRecord();\r\n                    record.ninkiNo = data['NINKI_NO'];\r\n                    record.umaNo = data['UMA_NO'];\r\n                    record.tanOdds = data['TAN_ODDS'];\r\n                    const umrnNinkiNo: number = data['UMRN_NINKI_NO'];\r\n                    record.idoFlg = record.ninkiNo <= umrnNinkiNo - 5;\r\n                    arr.push(record);\r\n                });\r\n                res.json(arr);\r\n                // return console.log(arr);\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                res.status(500).json({});\r\n            })\r\n            .finally(() => {\r\n                pool.releaseConnection(connection);\r\n            });\r\n    },\r\n);\r\n\r\napp.get(\r\n    '/odds/:kaisaiCd/:raceNo/:oddsTimeNo/fuku',\r\n    (req: Express.Request, res: Express.Response, next: Express.NextFunction) => {\r\n        let connection;\r\n        const kaisaiCd = req.params.kaisaiCd,\r\n            raceNo = req.params.raceNo,\r\n            oddsTimeNo = req.params.oddsTimeNo;\r\n        pool.getConnection()\r\n            .then(conn => {\r\n                connection = conn;\r\n                const sql = fs.readFileSync(process.cwd() + '/sql/select_odds_umrn_rank1_list.sql', 'utf8');\r\n                return conn.query(sql, [kaisaiCd, raceNo, oddsTimeNo, kaisaiCd, raceNo, oddsTimeNo]);\r\n            })\r\n            .then(rows => {\r\n                const umaNo = rows[0]['UMA_NO'];\r\n                const sql = fs.readFileSync(process.cwd() + '/sql/select_odds_fuku_list.sql', 'utf8');\r\n                return connection.query(sql, [\r\n                    kaisaiCd,\r\n                    raceNo,\r\n                    oddsTimeNo,\r\n                    umaNo,\r\n                    kaisaiCd,\r\n                    raceNo,\r\n                    oddsTimeNo,\r\n                    umaNo,\r\n                    kaisaiCd,\r\n                    raceNo,\r\n                    oddsTimeNo,\r\n                ]);\r\n            })\r\n            .then(rows => {\r\n                const arr: FukuOddsRecord[] = new Array();\r\n                rows.forEach(data => {\r\n                    const record = new FukuOddsRecord();\r\n                    record.ninkiNo = data['NINKI_NO'];\r\n                    record.umaNo = data['UMA_NO'];\r\n                    record.fukuOdds = data['FUKU_ODDS_MAX'];\r\n                    const umrnNinkiNo: number = data['UMRN_NINKI_NO'];\r\n                    record.idoFlg = record.ninkiNo <= umrnNinkiNo - 5;\r\n                    arr.push(record);\r\n                });\r\n                res.json(arr);\r\n                // return console.log(arr);\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                res.status(500).json({});\r\n            })\r\n            .finally(() => {\r\n                pool.releaseConnection(connection);\r\n            });\r\n    },\r\n);\r\n\r\napp.get(\r\n    '/odds/:kaisaiCd/:raceNo/:oddsTimeNo/umrn',\r\n    (req: Express.Request, res: Express.Response, next: Express.NextFunction) => {\r\n        let connection;\r\n        const kaisaiCd = req.params.kaisaiCd,\r\n            raceNo = req.params.raceNo,\r\n            oddsTimeNo = req.params.oddsTimeNo;\r\n        pool.getConnection()\r\n            .then(conn => {\r\n                connection = conn;\r\n                const sql = fs.readFileSync(process.cwd() + '/sql/select_odds_umrn_rank1_list.sql', 'utf8');\r\n                return conn.query(sql, [kaisaiCd, raceNo, oddsTimeNo, kaisaiCd, raceNo, oddsTimeNo]);\r\n            })\r\n            .then(rows => {\r\n                const umaNo = rows[0]['UMA_NO'];\r\n                const sql = fs.readFileSync(process.cwd() + '/sql/select_odds_umrn_list.sql', 'utf8');\r\n                return connection.query(sql, [\r\n                    kaisaiCd,\r\n                    raceNo,\r\n                    oddsTimeNo,\r\n                    umaNo,\r\n                    kaisaiCd,\r\n                    raceNo,\r\n                    oddsTimeNo,\r\n                    umaNo,\r\n                    kaisaiCd,\r\n                    raceNo,\r\n                    umaNo,\r\n                ]);\r\n            })\r\n            .then(rows => {\r\n                const arr: UmrnOddsRecord[] = new Array();\r\n                let prevRecord: UmrnOddsRecord = null;\r\n                rows.forEach(element => {\r\n                    const record: UmrnOddsRecord = new UmrnOddsRecord();\r\n                    record.ninkiNo = element['NINKI_NO'];\r\n                    record.umaNo = element['UMA_NO'];\r\n                    record.umrnOdds = element['UMRN_ODDS'];\r\n                    record.markCd = element['MARK_CD'];\r\n                    record.prevUmrnOddsRecord = prevRecord;\r\n                    arr.push(record);\r\n                    if (prevRecord !== null && prevRecord.umrnOdds !== null && record.umrnOdds !== null) {\r\n                        prevRecord.diffRt = record.umrnOdds / prevRecord.umrnOdds;\r\n                        if (prevRecord.ninkiNo <= 8) {\r\n                            prevRecord.kabeCd = prevRecord.diffRt >= 1.8 ? '01' : null;\r\n                        } else {\r\n                            prevRecord.kabeCd = prevRecord.diffRt >= 1.8 ? '10' : null;\r\n                            if (prevRecord.kabeCd !== null) {\r\n                                prevRecord.prevUmrnOddsRecord.kabeCd = prevRecord.kabeCd;\r\n                            }\r\n                        }\r\n                    }\r\n                    prevRecord = record;\r\n                });\r\n                res.json(arr);\r\n                // return console.log(arr);\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                res.status(500).json({});\r\n            })\r\n            .finally(() => {\r\n                pool.releaseConnection(connection);\r\n            });\r\n    },\r\n);\r\n\r\napp.get(\r\n    '/odds/:kaisaiCd/:raceNo/:oddsTimeNo/diff',\r\n    (req: Express.Request, res: Express.Response, next: Express.NextFunction) => {\r\n        let connection;\r\n        const kaisaiCd = req.params.kaisaiCd,\r\n            raceNo = req.params.raceNo,\r\n            oddsTimeNo = req.params.oddsTimeNo;\r\n        pool.getConnection()\r\n            .then(conn => {\r\n                connection = conn;\r\n                const sql = fs.readFileSync(process.cwd() + '/sql/select_odds_tnpk_time_diff.sql', 'utf8');\r\n                return conn.query(sql, [kaisaiCd, raceNo, oddsTimeNo - 1, oddsTimeNo]);\r\n            })\r\n            .then(rows => {\r\n                const arr: TnpkOddsDiffRecord[] = new Array();\r\n                rows.forEach(data => {\r\n                    const record = new TnpkOddsDiffRecord();\r\n                    record.umaNo = data['UMA_NO'];\r\n                    record.tanOdds1 = data['TAN_ODDS_1'];\r\n                    record.tanOdds2 = data['TAN_ODDS_2'];\r\n                    record.fukuOdds1 = data['FUKU_ODDS_MAX_1'];\r\n                    record.fukuOdds2 = data['FUKU_ODDS_MAX_2'];\r\n                    record.tanUpRt = record.tanOdds1 / record.tanOdds2;\r\n                    record.tanUpFlg = record.tanUpRt > 1;\r\n                    record.fukuUpRt = record.fukuOdds1 / record.fukuOdds2;\r\n                    record.fukuUpFlg = record.fukuUpRt > 1;\r\n                    arr.push(record);\r\n                });\r\n                res.json(arr);\r\n                // return console.log(arr);\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                res.status(500).json({});\r\n            })\r\n            .finally(() => {\r\n                pool.releaseConnection(connection);\r\n            });\r\n    },\r\n);\r\n\r\napp.post(\r\n    '/race/mark/:kaisaiCd/:raceNo/:umaNo',\r\n    (req: Express.Request, res: Express.Response, next: Express.NextFunction) => {\r\n        let connection: PoolConnection;\r\n        const kaisaiCd = req.params.kaisaiCd;\r\n        const raceNo = req.params.raceNo;\r\n        const umaNo = req.params.umaNo;\r\n        const markCd = req.body['markCd'];\r\n        pool.getConnection()\r\n            .then(conn => {\r\n                connection = conn;\r\n                connection.beginTransaction();\r\n            })\r\n            .then(() => {\r\n                const sql = fs.readFileSync(process.cwd() + '/sql/insert_race_uma_mark.sql', 'utf8');\r\n                return connection.query(sql, [kaisaiCd, raceNo, umaNo, markCd, markCd]);\r\n            })\r\n            .then(() => {\r\n                connection.commit();\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                res.status(500).json({});\r\n            })\r\n            .finally(() => {\r\n                pool.releaseConnection(connection);\r\n            });\r\n    },\r\n);\r\n\r\napp.listen(3000, () => {\r\n    pool.createPool(\r\n        settings.DatabaseSettings.HOST,\r\n        settings.DatabaseSettings.USER,\r\n        settings.DatabaseSettings.PASSWORD,\r\n        settings.DatabaseSettings.DATABASE,\r\n        settings.DatabaseSettings.CONNECTION_LIMIT,\r\n    )\r\n        .then(() => {\r\n            console.log('listening on port 3000...');\r\n        })\r\n        .catch(err => {\r\n            throw err;\r\n        });\r\n});\r\nexport default app;\r\n"],"sourceRoot":""}